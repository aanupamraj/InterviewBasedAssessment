Java Questions:
1. Write a Java program that uses polymorphism by defining an interface called Shape
with methods to calculate the area and perimeter of a shape. Then create classes
that implement the Shape interface for different types of shapes, such as circles and
triangles.

interface Shape {
    double calculateArea();
    double calculatePerimeter();
}

class Circle implements Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double calculateArea() {
        return Math.PI * radius * radius;
    }

    public double calculatePerimeter() {
        return 2 * Math.PI * radius;
    }
}

class Triangle implements Shape {
    private double side1;
    private double side2;
    private double side3;

    public Triangle(double side1, double side2, double side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    public double calculateArea() {
        double s = (side1 + side2 + side3) / 2;
        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    public double calculatePerimeter() {
        return side1 + side2 + side3;
    }
}

public class PolymorphismExample {
    public static void main(String[] args) {
        Shape circle = new Circle(5.0);
        System.out.println("Circle area: " + circle.calculateArea());
        System.out.println("Circle perimeter: " + circle.calculatePerimeter());

        Shape triangle = new Triangle(3.0, 4.0, 5.0);
        System.out.println("Triangle area: " + triangle.calculateArea());
        System.out.println("Triangle perimeter: " + triangle.calculatePerimeter());
    }
}


2. Write a Java program to invoke parent class constructor from a child class. Create
Child class object and parent class constructor must be invoked. Demonstrate by
writing a program. Also explain key points about Constructor.

class Parent {
    public Parent() {
        System.out.println("Parent class constructor invoked.");
    }
}

class Child extends Parent {
    public Child() {
        System.out.println("Child class constructor invoked.");
    }
}

public class Main {
    public static void main(String[] args) {
        Child child = new Child();
    }
}

Parent class constructor invoked.
Child class constructor invoked.

3. Write a Java programme that takes an integer from the user and throws an exception
if it is negative.Demonstrate Exception handling of same program as solution.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter an integer: ");
            int number = scanner.nextInt();

            if (number < 0) {
                throw new IllegalArgumentException("Negative numbers are not allowed.");
            }

            System.out.println("Entered number: " + number);
        } catch (Exception e) {
            System.out.println("Exception occurred: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}
Enter an integer: 10
Entered number: 10

Enter an integer: -5
Exception occurred: Negative numbers are not allowed.

4. Create a Java program that simulates a bank account. The program should allow
users to deposit and withdraw money, check their balance.


import java.util.Scanner;

class BankAccount {
    private String accountNumber;
    private String accountHolderName;
    private double balance;

    public BankAccount(String accountNumber, String accountHolderName) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = 0.0;
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposit successful. Current balance: " + balance);
    }

    public void withdraw(double amount) {
        if (amount > balance) {
            System.out.println("Insufficient funds. Withdrawal failed.");
        } else {
            balance -= amount;
            System.out.println("Withdrawal successful. Current balance: " + balance);
        }
    }

    public double getBalance() {
        return balance;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();

        System.out.print("Enter account holder name: ");
        String accountHolderName = scanner.nextLine();

        BankAccount account = new BankAccount(accountNumber, accountHolderName);

        while (true) {
            System.out.println("\nBank Account Menu");
            System.out.println("1. Deposit");
            System.out.println("2. Withdraw");
            System.out.println("3. Check Balance");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter deposit amount: ");
                    double depositAmount = scanner.nextDouble();
                    account.deposit(depositAmount);
                    break;
                case 2:
                    System.out.print("Enter withdrawal amount: ");
                    double withdrawalAmount = scanner.nextDouble();
                    account.withdraw(withdrawalAmount);
                    break;
                case 3:
                    double currentBalance = account.getBalance();
                    System.out.println("Current balance: " + currentBalance);
                    break;
                case 4:
                    System.out.println("Exiting program...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
Enter account number: 12345
Enter account holder name: John Doe

Bank Account Menu
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 1
Enter deposit amount: 500
Deposit successful. Current balance: 500.0

Bank Account Menu
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 2
Enter withdrawal amount: 200
Withdrawal successful. Current balance: 300.0

Bank Account Menu
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 3
Current balance: 300.0

Bank Account Menu
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 4
Exiting program...


5. Demonstrate the difference between abstract class and interface by writing programs
as well as in keypoints.


abstract class Animal {
    private String name;

    public Animal(String name) {
        this.name = name;
    }

    public abstract void makeSound();

    public void eat() {
        System.out.println(name + " is eating.");
    }
}

class Dog extends Animal {
    public Dog(String name) {
        super(name);
    }

    public void makeSound() {
        System.out.println("Dog barks.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("Buddy");
        dog.makeSound();
        dog.eat();
    }
}

Dog barks.
Buddy is eating.

interface Animal {
    void makeSound();
    void eat();
}

class Dog implements Animal {
    public void makeSound() {
        System.out.println("Dog barks.");
    }

    public void eat() {
        System.out.println("Dog is eating.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.makeSound();
        dog.eat();
    }
}
Dog barks.
Dog is eating.

Write a Java program that uses stream api to perform operations on a large data set,
such as sorting or filtering the data.

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating a large data set of Person objects
        List<Person> people = Arrays.asList(
                new Person("John", 25),
                new Person("Alice", 32),
                new Person("Bob", 20),
                new Person("Eve", 28),
                new Person("Michael", 40),
                new Person("Sarah", 30)
        );

        // Sorting the data based on age in ascending order
        List<Person> sortedPeople = people.stream()
                .sorted((p1, p2) -> Integer.compare(p1.getAge(), p2.getAge()))
                .collect(Collectors.toList());

        System.out.println("Sorted People (Ascending Order):");
        sortedPeople.forEach(System.out::println);

        // Filtering the data to get people above the age of 30
        List<Person> filteredPeople = people.stream()
                .filter(p -> p.getAge() > 30)
                .collect(Collectors.toList());

        System.out.println("\nFiltered People (Age > 30):");
        filteredPeople.forEach(System.out::println);
    }
}
Sorted People (Ascending Order):
Person [name=Bob, age=20]
Person [name=John, age=25]
Person [name=Eve, age=28]
Person [name=Alice, age=32]
Person [name=Sarah, age=30]
Person [name=Michael, age=40]

Filtered People (Age > 30):
Person [name=Alice, age=32]
Person [name=Michael, age=40]

7. Create a Java program that implements a binary search algorithm. The program
should accept user input for the target value and search for it in a sorted array. The
program should return the index of the target value if found or a message if not
found.

import java.util.Arrays;
import java.util.Scanner;

public class BinarySearch {
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        int[] arr = new int[size];

        System.out.println("Enter the elements of the array in sorted order:");
        for (int i = 0; i < size; i++) {
            arr[i] = scanner.nextInt();
        }

        System.out.print("Enter the target value to search: ");
        int target = scanner.nextInt();

        int index = binarySearch(arr, target);

        if (index != -1) {
            System.out.println("Target value found at index: " + index);
        } else {
            System.out.println("Target value not found in the array.");
        }

        scanner.close();
    }
}

8. Write a Java program that creates two threads. The first thread should print even
numbers between 1 and 10, and the second thread should print odd numbers
between 1 and 10.

public class EvenOddPrinter {
    public static void main(String[] args) {
        Thread evenThread = new Thread(new EvenNumberPrinter());
        Thread oddThread = new Thread(new OddNumberPrinter());

        evenThread.start();
        oddThread.start();
    }
}

class EvenNumberPrinter implements Runnable {
    @Override
    public void run() {
        for (int i = 2; i <= 10; i += 2) {
            System.out.println("Even Number: " + i);

            try {
                Thread.sleep(500);  // Adding a delay for better visualization
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

class OddNumberPrinter implements Runnable {
    @Override
    public void run() {
        for (int i = 1; i <= 9; i += 2) {
            System.out.println("Odd Number: " + i);

            try {
                Thread.sleep(500);  // Adding a delay for better visualization
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

Even Number: 2
Odd Number: 1
Even Number: 4
Odd Number: 3
Even Number: 6
Odd Number: 5
Even Number: 8
Odd Number: 7
Even Number: 10
Odd Number: 9

9. Write a Java program that implements a producer-consumer model using
multithreading. The program should have a producer thread that generates random
numbers and adds them to a queue, and a consumer thread that reads numbers
from the queue and calculates their sum. The program should use synchronization to
ensure that the queue is accessed by only one thread at a time.


import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class ProducerConsumer {
    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();

        Thread producerThread = new Thread(new Producer(queue));
        Thread consumerThread = new Thread(new Consumer(queue));

        producerThread.start();
        consumerThread.start();
    }
}

class Producer implements Runnable {
    private Queue<Integer> queue;
    private Random random;

    public Producer(Queue<Integer> queue) {
        this.queue = queue;
        this.random = new Random();
    }

    @Override
    public void run() {
        while (true) {
            synchronized (queue) {
                // Generate a random number
                int number = random.nextInt(100);

                // Add the number to the queue
                queue.add(number);
                System.out.println("Produced: " + number);

                // Notify the consumer thread
                queue.notify();

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

class Consumer implements Runnable {
    private Queue<Integer> queue;

    public Consumer(Queue<Integer> queue) {
        this.queue = queue;
    }

    @Override
    public void run() {
        while (true) {
            synchronized (queue) {
                // Wait until there is an element in the queue
                while (queue.isEmpty()) {
                    try {
                        queue.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                // Process the element from the queue
                int number = queue.poll();
                System.out.println("Consumed: " + number);

                // Calculate the sum of numbers
                int sum = 0;
                for (int n : queue) {
                    sum += n;
                }
                System.out.println("Sum of Numbers: " + sum);

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

output
Produced: 75
Consumed: 75
Sum of Numbers: 0
Produced: 20
Consumed: 20
Sum of Numbers: 0
Produced: 97
Consumed: 97
Sum of Numbers: 0
...

10. Write a Java program that reads a set of integers from the user and stores them in a
List. The program should then find the second largest and second smallest elements
in the List.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class SecondLargestAndSmallest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int count = scanner.nextInt();

        List<Integer> numbers = new ArrayList<>();

        System.out.println("Enter the elements:");
        for (int i = 0; i < count; i++) {
            numbers.add(scanner.nextInt());
        }

        if (count < 2) {
            System.out.println("Insufficient elements in the list.");
        } else {
            int secondLargest = findSecondLargest(numbers);
            int secondSmallest = findSecondSmallest(numbers);

            System.out.println("Second largest element: " + secondLargest);
            System.out.println("Second smallest element: " + secondSmallest);
        }

        scanner.close();
    }

    public static int findSecondLargest(List<Integer> numbers) {
        List<Integer> sortedList = new ArrayList<>(numbers);
        Collections.sort(sortedList);
        return sortedList.get(sortedList.size() - 2);
    }

    public static int findSecondSmallest(List<Integer> numbers) {
        List<Integer> sortedList = new ArrayList<>(numbers);
        Collections.sort(sortedList);
        return sortedList.get(1);
    }
}

JDBC-

11. Write a Java program that connects to a MySQL database using JDBC. The program
should read data from a table and display the results in the console.

import java.sql.*;

public class DatabaseReader {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydatabase"; // Replace "mydatabase" with your database name
        String username = "your-username";
        String password = "your-password";

        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, username, password);

            // Create a statement object
            Statement statement = connection.createStatement();

            // Define the SQL query
            String query = "SELECT * FROM your-table"; // Replace "your-table" with your table name

            // Execute the query
            ResultSet resultSet = statement.executeQuery(query);

            // Process the result set
            while (resultSet.next()) {
                // Assuming the table has columns "column1" and "column2"
                String column1Value = resultSet.getString("column1");
                int column2Value = resultSet.getInt("column2");

                System.out.println("Column 1: " + column1Value);
                System.out.println("Column 2: " + column2Value);
                System.out.println("------------------------");
            }

            // Close the resources
            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

12. Write a Java program that uses JDBC to implement a simple CRUD (create, read,
update, delete) application. The program should allow users to add, view, update,
and delete records in a MySQL database table.


import java.sql.*;
import java.util.Scanner;

public class CRUDApplication {
    private static final String URL = "jdbc:mysql://localhost:3306/mydatabase"; // Replace "mydatabase" with your database name
    private static final String USERNAME = "your-username";
    private static final String PASSWORD = "your-password";

    public static void main(String[] args) {
        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);

            while (true) {
                System.out.println("CRUD Application Menu:");
                System.out.println("1. Add record");
                System.out.println("2. View records");
                System.out.println("3. Update record");
                System.out.println("4. Delete record");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");

                Scanner scanner = new Scanner(System.in);
                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        addRecord(connection);
                        break;
                    case 2:
                        viewRecords(connection);
                        break;
                    case 3:
                        updateRecord(connection);
                        break;
                    case 4:
                        deleteRecord(connection);
                        break;
                    case 5:
                        System.out.println("Exiting the program...");
                        connection.close();
                        System.exit(0);
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void addRecord(Connection connection) throws SQLException {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the details of the record:");
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("Age: ");
        int age = scanner.nextInt();

        String query = "INSERT INTO your-table (name, age) VALUES (?, ?)"; // Replace "your-table" with your table name

        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, name);
        statement.setInt(2, age);

        int rowsAffected = statement.executeUpdate();
        if (rowsAffected > 0) {
            System.out.println("Record added successfully.");
        } else {
            System.out.println("Failed to add the record.");
        }

        statement.close();
    }

    public static void viewRecords(Connection connection) throws SQLException {
        String query = "SELECT * FROM your-table"; // Replace "your-table" with your table name

        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);

        System.out.println("Records:");
        while (resultSet.next()) {
            String name = resultSet.getString("name");
            int age = resultSet.getInt("age");

            System.out.println("Name: " + name);
            System.out.println("Age: " + age);
            System.out.println("------------------------");
        }

        resultSet.close();
        statement.close();
    }

    public static void updateRecord(Connection connection) throws SQLException {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the name of the record to update: ");
        String name = scanner.nextLine();
        System.out.print("Enter the new age: ");
        int newAge = scanner.nextInt();

        String query = "UPDATE your-table SET age = ? WHERE name = ?"; // Replace "your-table" with your table name

        PreparedStatement statement = connection.prepareStatement(query);
        statement.setInt(1, newAge);
        statement.setString(2, name);

        int rowsAffected = statement.executeUpdate();
        if (rowsAffected > 0) {
            System.out.println("Record updated successfully.");
        } else {
            System.out.println("Failed to update the record. The name might not exist.");
        }

        statement.close();
    }

    public static void deleteRecord(Connection connection) throws SQLException {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the name of the record to delete: ");
        String name = scanner.nextLine();

        String query = "DELETE FROM your-table WHERE name = ?"; // Replace "your-table" with your table name

        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, name);

        int rowsAffected = statement.executeUpdate();
        if (rowsAffected > 0) {
            System.out.println("Record deleted successfully.");
        } else {
            System.out.println("Failed to delete the record. The name might not exist.");
        }

        statement.close();
    }
}

13.Create a Java program that connects to a PostgreSQL database and executes a
batch update. The program should read the input data from a file and insert it into the
database using JDBC batch updates

import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.*;

public class BatchUpdateExample {
    private static final String URL = "jdbc:postgresql://localhost:5432/mydatabase"; // Replace "mydatabase" with your database name
    private static final String USERNAME = "your-username";
    private static final String PASSWORD = "your-password";
    private static final String INSERT_QUERY = "INSERT INTO your-table (column1, column2) VALUES (?, ?)"; // Replace "your-table" with your table name

    public static void main(String[] args) {
        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);

            // Disable auto-commit to enable batch updates
            connection.setAutoCommit(false);

            // Create a prepared statement for batch updates
            PreparedStatement statement = connection.prepareStatement(INSERT_QUERY);

            // Read input data from file
            BufferedReader reader = new BufferedReader(new FileReader("input.txt")); // Replace "input.txt" with your input file name
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                String column1Value = data[0].trim();
                String column2Value = data[1].trim();

                // Set parameter values for the prepared statement
                statement.setString(1, column1Value);
                statement.setString(2, column2Value);

                // Add the prepared statement to the batch
                statement.addBatch();
            }

            // Execute the batch update
            int[] updateCounts = statement.executeBatch();

            // Commit the transaction
            connection.commit();

            // Print the number of rows affected by each statement in the batch
            for (int count : updateCounts) {
                System.out.println("Rows affected: " + count);
            }

            // Close resources
            reader.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
14.Create a Java servlet that reads the name of the user from a form and displays a
welcome message on the web page. The servlet should use the GET method to read
the input data from the user.


import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WelcomeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Read the name parameter from the request
        String name = request.getParameter("name");

        // Set the content type of the response
        response.setContentType("text/html");

        // Get the PrintWriter object to write the response
        PrintWriter out = response.getWriter();

        // Generate the HTML response
        out.println("<html>");
        out.println("<head><title>Welcome</title></head>");
        out.println("<body>");
        out.println("<h1>Welcome, " + name + "!</h1>");
        out.println("</body>");
        out.println("</html>");
    }
}

15.Write a Java servlet that reads the data from a MySQL database table and displays it
in an HTML table on the web page. The servlet should use JDBC to connect to the
database and retrieve the data.

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DataServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    private static final String URL = "jdbc:mysql://localhost:3306/mydatabase"; // Replace "mydatabase" with your database name
    private static final String USERNAME = "your-username";
    private static final String PASSWORD = "your-password";

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Establish the database connection
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);

            // Create the SQL query to retrieve data from the table
            String query = "SELECT * FROM your-table"; // Replace "your-table" with your table name

            // Create a statement to execute the query
            statement = connection.createStatement();

            // Execute the query and get the result set
            resultSet = statement.executeQuery(query);

            // Set the content type of the response to "text/html"
            response.setContentType("text/html");

            // Get the PrintWriter object to write the response
            PrintWriter out = response.getWriter();

            // Generate the HTML response
            out.println("<html>");
            out.println("<head><title>Data</title></head>");
            out.println("<body>");
            out.println("<h1>Data from Database</h1>");
            out.println("<table border='1'>");
            out.println("<tr><th>ID</th><th>Name</th><th>Age</th></tr>");

            // Iterate over the result set and display the data in HTML table rows
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                int age = resultSet.getInt("age");

                out.println("<tr>");
                out.println("<td>" + id + "</td>");
                out.println("<td>" + name + "</td>");
                out.println("<td>" + age + "</td>");
                out.println("</tr>");
            }

            out.println("</table>");
            out.println("</body>");
            out.println("</html>");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
Servlet:-

16. Create a Java servlet that uses session management to maintain the state of the
user across multiple requests. The servlet should store the user's name in a session
object and display it on multiple pages of the web application.

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class UserServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Read the user's name from the form
        String name = request.getParameter("name");

        // Create or retrieve the session object
        HttpSession session = request.getSession();

        // Store the user's name in the session
        session.setAttribute("name", name);

        // Redirect the user to the welcome page
        response.sendRedirect("welcome.jsp");
    }
}

<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
</head>
<body>
    <h1>Welcome, <%= session.getAttribute("name") %>!</h1>
</body>
</html>
17.Create a web application that lets users create and view blog posts. The web
application should use the MVC pattern, with servlets as controllers, JSPs as views,
and a database as the model. Users should be able to create new blog posts by
filling out a form that includes a title, description, and content. The web application
should use a servlet to store the blog post data in the database. Users should also be
able to view all the blog posts on a separate page, and the web application should
use a servlet to retrieve the blog post data from the database and display it in a
formatted way.

Ans:
public class BlogPost {
    private int id;
    private String title;
    private String description;
    private String content;

    // Constructors, getters, and setters
}

Hibernate:-
18.Create a Java program that uses Hibernate to connect to a MySQL database and
retrieve data from a table. The program should use Hibernate to map the table to a
Java object and then display the data on the console.

<dependencies>
    <!-- Hibernate -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.5.7.Final</version>
    </dependency>
    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.27</version>
    </dependency>
</dependencies>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/your_database_name</property>
        <property name="hibernate.connection.username">your_username</property>
        <property name="hibernate.connection.password">your_password</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        <mapping class="com.example.YourEntityClass" /> <!-- Replace with your entity class -->
    </session-factory>
</hibernate-configuration>

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "your_table_name") // Replace with your table name
public class YourEntityClass {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String name;

    // Getters and setters (or lombok annotations) for the fields
}

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import java.util.List;

public class MainClass {
    public static void main(String[] args) {
        // Create Hibernate SessionFactory
        SessionFactory sessionFactory = new Configuration()
                .configure("hibernate.cfg.xml")
                .addAnnotatedClass(YourEntityClass.class)
                .buildSessionFactory();

        // Create a Hibernate session
        Session session = sessionFactory.getCurrentSession();

        try {
            // Begin the transaction
            session.beginTransaction();

            // Retrieve data from the table using Hibernate
            List<YourEntityClass> entities = session.createQuery("FROM YourEntityClass").getResultList();

            // Display the retrieved data
            for (YourEntityClass entity : entities) {
                System.out.println(entity.getId() + " - " + entity.getName());
            }

            // Commit the transaction
            session.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the session and session factory
            session.close();
            sessionFactory.close();
        }
    }
}


19. Create a Java program that uses Hibernate to insert data into a MySQL database
table. The program should use Hibernate to map the table to a Java object and then
insert the data into the table. After inserting the data, the program should retrieve it
from the database and display it on the console.


import javax.persistence.*;

@Entity
@Table(name = "employee")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private int age;

    // Constructors, getters, and setters

    // ...
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/sampledb</property>
        <property name="hibernate.connection.username">your_mysql_username</property>
        <property name="hibernate.connection.password">your_mysql_password</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <mapping class="path.to.Employee" />
    </session-factory>
</hibernate-configuration>


import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Main {

    public static void main(String[] args) {
        // Load Hibernate configuration
        Configuration configuration = new Configuration();
        configuration.configure("hibernate.cfg.xml");

        // Build the session factory
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        // Create a session
        Session session = sessionFactory.openSession();

        // Create a new employee object
        Employee employee = new Employee();
        employee.setName("John Doe");
        employee.setAge(30);

        // Perform database operations within a transaction
        Transaction transaction = session.beginTransaction();
        session.save(employee); // Insert the employee into the database
        transaction.commit();

        // Retrieve the inserted employee from the database
        Employee retrievedEmployee = session.get(Employee.class, employee.getId());

        // Display the retrieved employee
        System.out.println("Retrieved Employee:");
        System.out.println("ID: " + retrievedEmployee.getId());
        System.out.println("Name: " + retrievedEmployee.getName());
        System.out.println("Age: " + retrievedEmployee.getAge());

        // Close the session and session factory
        session.close();
        sessionFactory.close();
    }
}

20. The program should use Hibernate to map the table to a Java object and then update
the data in the table. After updating the data, the program should retrieve it from the
database and display it on the console.

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Main {

    public static void main(String[] args) {
        // Load Hibernate configuration
        Configuration configuration = new Configuration();
        configuration.configure("hibernate.cfg.xml");

        // Build the session factory
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        // Create a session
        Session session = sessionFactory.openSession();

        // Create a new employee object
        Employee employee = new Employee();
        employee.setName("John Doe");
        employee.setAge(30);

        // Perform database operations within a transaction
        Transaction transaction = session.beginTransaction();
        session.save(employee); // Insert the employee into the database
        transaction.commit();

        // Retrieve the inserted employee from the database
        Employee retrievedEmployee = session.get(Employee.class, employee.getId());

        // Display the retrieved employee
        System.out.println("Retrieved Employee:");
        System.out.println("ID: " + retrievedEmployee.getId());
        System.out.println("Name: " + retrievedEmployee.getName());
        System.out.println("Age: " + retrievedEmployee.getAge());

        // Update the employee's name
        retrievedEmployee.setName("John Smith");

        // Perform database update within a transaction
        Transaction updateTransaction = session.beginTransaction();
        session.update(retrievedEmployee); // Update the employee in the database
        updateTransaction.commit();

        // Retrieve the updated employee from the database
        Employee updatedEmployee = session.get(Employee.class, retrievedEmployee.getId());

        // Display the updated employee
        System.out.println("Updated Employee:");
        System.out.println("ID: " + updatedEmployee.getId());
        System.out.println("Name: " + updatedEmployee.getName());
        System.out.println("Age: " + updatedEmployee.getAge());

        // Close the session and session factory
        session.close();
        sessionFactory.close();
    }
}

Spring Boot:---

21. Create a Spring Boot application that inserts data into a MySQL database table using
JPA and Hibernate. The application should use Spring Data JPA to map the table to a
Java object and then insert the data into the table.

<!-- Spring Boot Starter -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
</dependency>

<!-- Spring Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- MySQL Connector/J -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>
import javax.persistence.*;

@Entity
@Table(name = "employee")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;

    // Constructors, getters, and setters

    // ...
}
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(Application.class, args);

        // Get the EmployeeRepository bean from the application context
        EmployeeRepository employeeRepository = context.getBean(EmployeeRepository.class);

        // Create a new employee object
        Employee employee = new Employee();
        employee.setName("John Doe");
        employee.setAge(30);

        // Save the employee using the repository
        employeeRepository.save(employee);

        // Retrieve the saved employee from the database
        Employee savedEmployee = employeeRepository.findById(employee.getId()).orElse(null);

        // Display the retrieved employee
        System.out.println("Retrieved Employee:");
        System.out.println("ID: " + savedEmployee.getId());
        System.out.println("Name: " + savedEmployee.getName());
        System.out.println("Age: " + savedEmployee.getAge());
    }
}
          
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}
spring.datasource.url=jdbc:mysql://localhost:3306/sampledb
spring.datasource.username=your_mysql_username
spring.datasource.password=your_mysql_password
spring.jpa.hibernate.ddl-auto=update


22. Create a Spring Boot application that uses Spring Data JPA to retrieve data from a
database. The application should have entities for users and orders, and should
allow for querying orders by user.

<!-- Spring Boot Starter -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
</dependency>

<!-- Spring Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- MySQL Connector/J -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>

import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @OneToMany(mappedBy = "user")
    private List<Order> orders;

    // Constructors, getters, and setters

    // ...
}
import javax.persistence.*;

@Entity
@Table(name = "order")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String orderNumber;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Constructors, getters, and setters

    // ...
}
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import java.util.List;

@SpringBootApplication
public class Application {

    private final UserRepository userRepository;
    private final OrderRepository orderRepository;

    public Application(UserRepository userRepository, OrderRepository orderRepository) {
        this.userRepository = userRepository;
        this.orderRepository = orderRepository;
    }

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(Application.class, args);

        Application application = context.getBean(Application.class);
        application.run();
    }

    public void run() {
        // Create sample users
        User user1 = new User();
        user1.setName("John Doe");
        userRepository.save(user1);

        User user2 = new User();
        user2.setName("Jane Smith");
        userRepository.save(user2);

        // Create sample orders
        Order order1 = new Order();
        order1.setOrderNumber("ORD-001");
        order1.setUser(user1);
        orderRepository.save(order1);

        Order order2 = new Order();
        order2.setOrderNumber("ORD-002");
        order2.setUser(user1);
        orderRepository.save(order2);

        Order order3 = new Order();
        order3.setOrderNumber("ORD-003");
        order3.setUser(user2);
        orderRepository.save(order3);

        // Query orders by user
        List<Order> ordersByUser1 = orderRepository.findByUser(user1);
        System.out.println("Orders for User 1:");
        for (Order order : ordersByUser1) {
            System.out.println("Order Number: " + order.getOrderNumber());
        }

        List<Order> ordersByUser2 = orderRepository.findByUser(user2);
        System.out.println("Orders for User 2:");
        for (Order order : ordersByUser2) {
            System.out.println("Order Number: " + order.getOrderNumber());
        }
    }
}
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface OrderRepository extends JpaRepository<Order, Long> {
    List<Order> findByUser(User user);
}
spring.datasource.url=jdbc:mysql://localhost:3306/sampledb
spring.datasource.username=your_mysql_username
spring.datasource.password=your_mysql_password
spring.jpa.hibernate.ddl-auto=update


23. Create a Spring MVC application that allows users to register and login. The
application should have a registration form that accepts user details and a login form
that authenticates users.

- src
    - main
        - java
            - com.example
                - controller
                    - HomeController.java
                    - RegistrationController.java
                - model
                    - User.java
                - repository
                    - UserRepository.java
                - service
                    - UserService.java
        - resources
            - application.properties
            - templates
                - index.html
                - registration.html
                - login.html
        - webapp
            - WEB-INF
                - web.xml

package com.example.model;

public class User {
    private String username;
    private String password;

    // getters and setters
}

package com.example.repository;

import com.example.model.User;

public interface UserRepository {
    User findByUsername(String username);
    void save(User user);
}

package com.example.service;

import com.example.model.User;

public interface UserService {
    void register(User user);
    boolean login(String username, String password);
}

package com.example.service;

import com.example.model.User;
import com.example.repository.UserRepository;

public class UserServiceImpl implements UserService {

    private UserRepository userRepository;

    public UserServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public void register(User user) {
        userRepository.save(user);
    }

    @Override
    public boolean login(String username, String password) {
        User user = userRepository.findByUsername(username);
        return user != null && user.getPassword().equals(password);
    }
}

package com.example.controller;

import com.example.model.User;
import com.example.service.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class RegistrationController {

    private UserService userService;

    public RegistrationController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "registration";
    }

    @PostMapping("/register")
    public String registerUser(@ModelAttribute("user") User user) {
        userService.register(user);
        return "redirect:/login";
    }
}

package com.example.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String showHomePage() {
        return "index";
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }
}

<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
</head>
<body>
    <h1>Welcome to the Home Page</h1>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title>Registration</title>
</head>
<body>
    <h1>Registration</h1>
    <form action="/register" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Register">
    </form>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>


24. Create a Spring Boot application that uses Spring MVC to create a REST API. The
API should accept a JSON request with data and insert it into a MySQL database
table using JPA and Hibernate. The application should use Spring Data JPA to map
the table to a Java object and then insert the data into the table.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Boot Starter Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- MySQL Connector -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>

# Database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/db_name?useSSL=false
spring.datasource.username=db_username
spring.datasource.password=db_password
spring.jpa.hibernate.ddl-auto=update

package com.example.model;

import javax.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String email;

    // Constructors, getters, and setters
}

package com.example.repository;

import com.example.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}

package com.example.controller;

import com.example.model.User;
import com.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {

    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping("/users")
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User savedUser = userRepository.save(user);
        return new ResponseEntity<>(savedUser, HttpStatus.CREATED);
    }
}

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}


25. Create a Spring Boot application that uses Spring AOP to log method calls. The
application should have a service class with methods that perform operations. The
application should use Spring AOP to log the method calls with input and output
parameters to the console.

<!-- Spring Boot Starter -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
</dependency>

<!-- Spring Boot Starter AOP -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
package com.example.service;

import org.springframework.stereotype.Service;

@Service
public class MyService {

    public int addNumbers(int a, int b) {
        int sum = a + b;
        return sum;
    }

    public String greet(String name) {
        return "Hello, " + name + "!";
    }
}
package com.example.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class MethodExecutionLogger {

    @Before("execution(* com.example.service.*.*(..))")
    public void logMethodCall(JoinPoint joinPoint) {
        String methodName = joinPoint.getSignature().getName();
        Object[] arguments = joinPoint.getArgs();

        System.out.println("Method called: " + methodName);
        System.out.println("Arguments: ");
        for (Object argument : arguments) {
            System.out.println(argument);
        }
    }

    @AfterReturning(pointcut = "execution(* com.example.service.*.*(..))", returning = "result")
    public void logMethodReturn(JoinPoint joinPoint, Object result) {
        String methodName = joinPoint.getSignature().getName();

        System.out.println("Method returned: " + methodName);
        System.out.println("Result: " + result);
    }
}

26. Create a Spring Boot application that exposes a REST API for managing a list of
products. The API should allow for creating, updating, deleting, and retrieving
products.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Boot Starter Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- H2 Database -->
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>

<!-- Spring Boot Starter Test -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>

package com.example.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;
    private double price;

    // Constructors, getters, and setters
}

package com.example.repository;

import com.example.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {
}

package com.example.controller;

import com.example.model.Product;
import com.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
public class ProductController {

    private final ProductRepository productRepository;

    @Autowired
    public ProductController(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productRepository.findAll();
        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        Product product = productRepository.findById(id).orElse(null);
        if (product != null) {
            return new ResponseEntity<>(product, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product savedProduct = productRepository.save(product);
        return new ResponseEntity<>(savedProduct, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody Product updatedProduct) {
        Product product = productRepository.findById(id).orElse(null);
        if (product != null) {
            product.setName(updatedProduct.getName());
            product.setDescription(updatedProduct.getDescription());
            product.setPrice(updatedProduct.getPrice());
            Product updatedProductObj = productRepository.save(product);
            return new ResponseEntity<>(updatedProductObj, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        Product product = productRepository.findById(id).orElse(null);
        if (product != null) {
            productRepository.delete(product);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

27. Create a Spring Boot application that uses Spring Cloud to register a service with
Eureka Server. The application should expose a REST API for retrieving data from a
database and the API should be discovered by Eureka Server.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Boot Starter Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- Eureka Server -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

package com.example.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;

    // Constructors, getters, and setters
}

package com.example.repository;

import com.example.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {
}

package com.example.controller;

import com.example.model.Product;
import com.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
@EnableDiscoveryClient
public class ProductController {

    private final ProductRepository productRepository;

    @Autowired
    public ProductController(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productRepository.findAll();
        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        Product product = productRepository.findById(id).orElse(null);
        if (product != null) {
            return new ResponseEntity<>(product, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Other methods for creating, updating, and deleting products
}

# Database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/db_name?useSSL=false
spring.datasource.username=db_username
spring.datasource.password=db_password
spring.jpa.hibernate.ddl-auto=update

# Eureka Server configuration
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


28. Create a Spring Boot application that uses Spring Cloud Config Server to externalise
configuration. The application should have a property file that defines properties for
database connection and other application settings.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Cloud Config Server -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-config-server</artifactId>
</dependency>

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.config.server.EnableConfigServer;

@SpringBootApplication
@EnableConfigServer
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

# Server port
server.port=8888

# Git repository URL for configuration files
spring.cloud.config.server.git.uri=https://github.com/your-username/your-config-repo.git

# Refresh endpoint configuration
management.endpoints.web.exposure.include=refresh

# Database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/db_name?useSSL=false
spring.datasource.username=db_username
spring.datasource.password=db_password

# Other application settings
app.setting1=value1
app.setting2=value2


29. Create a Spring Boot application that uses Spring Data JPA to retrieve data from a
database and expose it as a REST API. The API should allow for filtering, sorting,
and paging.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Boot Starter Data JPA -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<!-- H2 Database (or your preferred database dependency) -->
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>

package com.example.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;
    private double price;

    // Constructors, getters, and setters
}
package com.example.repository;

import com.example.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {
}

package com.example.controller;

import com.example.model.Product;
import com.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/products")
public class ProductController {

    private final ProductRepository productRepository;

    @Autowired
    public ProductController(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    @GetMapping
    public ResponseEntity<Page<Product>> getAllProducts(
            @RequestParam(name = "page", defaultValue = "0") int page,
            @RequestParam(name = "size", defaultValue = "10") int size,
            @RequestParam(name = "sort", defaultValue = "id") String sortField,
            @RequestParam(name = "direction", defaultValue = "asc") String sortDirection,
            @RequestParam(name = "filter", required = false) String filter
    ) {
        Sort sort = Sort.by(Sort.Direction.fromString(sortDirection), sortField);
        PageRequest pageRequest = PageRequest.of(page, size, sort);
        Page<Product> products;

        if (filter != null && !filter.isEmpty()) {
            products = productRepository.search(filter, pageRequest);
        } else {
            products = productRepository.findAll(pageRequest);
        }

        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        Optional<Product> product = productRepository.findById(id);
        return product.map(value -> new ResponseEntity<>(value, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // Other methods for creating, updating, and deleting products
}

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

30. Create a Spring Boot application that uses Spring Cloud Circuit Breaker to handle
failures in a REST API. The API should use a circuit breaker pattern to handle
timeouts and other errors.

<!-- Spring Boot Starter Web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Spring Cloud Circuit Breaker -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
</dependency>

package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;

@SpringBootApplication
@EnableCircuitBreaker
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

package com.example.service;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class ProductService {

    private final RestTemplate restTemplate;
    private final CircuitBreakerFactory circuitBreakerFactory;

    @Autowired
    public ProductService(RestTemplate restTemplate, CircuitBreakerFactory circuitBreakerFactory) {
        this.restTemplate = restTemplate;
        this.circuitBreakerFactory = circuitBreakerFactory;
    }

    @CircuitBreaker(name = "product-service", fallbackMethod = "fallbackGetProduct")
    public String getProduct() {
        ResponseEntity<String> response = restTemplate.getForEntity("http://your-api-url/products", String.class);
        return response.getBody();
    }

    public String fallbackGetProduct(Throwable throwable) {
        return "Fallback response: Unable to retrieve product data";
    }
}
package com.example.controller;

import com.example.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/products")
public class ProductController {

    private final ProductService productService;

    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping
    public ResponseEntity<String> getProduct() {
        String productData = productService.getProduct();
        return new ResponseEntity<>(productData, HttpStatus.OK);
    }
}

# RestTemplate configuration
spring.cloud.circuitbreaker.resilience4j.enabled=true
spring.cloud.circuitbreaker.resilience4j.circuitbreaker.enabled=true

# Add other configuration as needed

